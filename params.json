{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Octonode","tagline":"github api v3 in nodejs","body":"# octonode\r\n\r\noctonode is a library for nodejs to access the [github v3 api](http://developer.github.com)\r\n\r\n## Installation\r\n```\r\nnpm install octonode\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar github = require('octonode');\r\n\r\n// Then we instanciate a client with or without a token (as show in a later section)\r\n\r\nvar ghme   = client.me();\r\nvar ghuser = client.user('pksunkara');\r\nvar ghrepo = client.repo('pksunkara/hub');\r\nvar ghorg  = client.org('flatiron');\r\nvar ghgist = client.gist();\r\nvar ghteam = client.team(37);\r\n```\r\n\r\n### Build a client which accesses any public information\r\n\r\n```js\r\nvar client = github.client();\r\n\r\nclient.get('/users/pksunkara', function (err, status, body) {\r\n  console.log(body); //json object\r\n});\r\n```\r\n\r\n### Build a client from an access token\r\n\r\n```js\r\nvar client = github.client('someaccesstoken');\r\n\r\nclient.get('/user', function (err, status, body) {\r\n  console.log(body); //json object\r\n});\r\n```\r\n\r\n### Build a client from credentials\r\n\r\n```js\r\nvar client = github.client({\r\n  username: 'pksunkara',\r\n  password: 'password'\r\n});\r\n\r\nclient.get('/user', function (err, status, body) {\r\n  console.log(body); //json object\r\n});\r\n```\r\n\r\n__Many of the below use cases use parts of the above code__\r\n\r\n## Authentication\r\n\r\n### Authenticate to github in cli mode (desktop application)\r\n\r\n```js\r\ngithub.auth.config({\r\n  username: 'pksunkara',\r\n  password: 'password'\r\n}).login(['user', 'repo', 'gist'], function (err, id, token) {\r\n  console.log(id, token);\r\n});\r\n```\r\n\r\n### Revoke authentication to github in cli mode (desktop application)\r\n\r\n```js\r\ngithub.auth.config({\r\n  username: 'pksunkara',\r\n  password: 'password'\r\n}).revoke(id, function (err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n### Authenticate to github in web mode (web application)\r\n\r\n```js\r\n// Web application which authenticates to github\r\nvar http = require('http')\r\n  , url = require('url')\r\n  , qs = require('querystring')\r\n  , github = require('octonode');\r\n\r\n// Build the authorization config and url\r\nvar auth_url = github.auth.config({\r\n  id: 'mygithubclientid',\r\n  secret: 'mygithubclientsecret'\r\n}).login(['user', 'repo', 'gist']);\r\n\r\n// Web server\r\nhttp.createServer(function (req, res) {\r\n  uri = url.parse(req.url);\r\n  // Redirect to github login\r\n  if (uri.pathname=='/login') {\r\n    res.writeHead(301, {'Content-Type': 'text/plain', 'Location': auth_url})\r\n    res.end('Redirecting to ' + auth_url);\r\n  }\r\n  // Callback url from github login\r\n  else if (uri.pathname=='/auth') {\r\n    github.auth.login(qs.parse(uri.query).code, function (err, token) {\r\n      console.log(token);\r\n    });\r\n    res.writeHead(200, {'Content-Type': 'text/plain'})\r\n    res.end('');\r\n  } else {\r\n    res.writeHead(200, {'Content-Type': 'text/plain'})\r\n    res.end('');\r\n  }\r\n}).listen(3000);\r\n\r\nconsole.log('Server started on 3000');\r\n```\r\n\r\n## API Callback Structure\r\n\r\n__All the callbacks for the following will take first an error argument, then a data argument, like this:__\r\n\r\n```js\r\nghme.info(function(err, data) {\r\n  console.log(\"error: \" + err);\r\n  console.log(\"data: \" + data);\r\n});\r\n```\r\n\r\n## Github authenticated user api\r\n\r\nToken/Credentials required for the following:\r\n\r\n### Get information about the user (GET /user)\r\n\r\n```js\r\nghme.info(callback); //json\r\n```\r\n\r\n### Update user profile (PATCH /user)\r\n\r\n```js\r\nghme.update({\r\n  \"name\": \"monalisa octocat\",\r\n  \"email\": \"octocat@github.com\",\r\n}, callback);\r\n```\r\n\r\n### Get emails of the user (GET /user/emails)\r\n\r\n```js\r\nghme.emails(callback); //array of emails\r\n```\r\n\r\n### Set emails of the user (POST /user/emails)\r\n\r\n```js\r\nghme.emails(['new1@ma.il', 'new2@ma.il'], callback); //array of emails\r\nghme.emails('new@ma.il', callback); //array of emails\r\n```\r\n\r\n### Delete emails of the user (DELETE /user/emails)\r\n\r\n```js\r\nghme.emails(['new1@ma.il', 'new2@ma.il']);\r\nghme.emails('new@ma.il');\r\n```\r\n\r\n### Get the followers of the user (GET /user/followers)\r\n\r\n```js\r\nghme.followers(callback); //array of github users\r\n```\r\n\r\n### Get users whom the user is following (GET /user/following)\r\n\r\n```js\r\nghme.following(callback); //array of github users\r\n```\r\n\r\n### Check if the user is following a user (GET /user/following/marak)\r\n\r\n```js\r\nghme.following('marak', callback); //boolean\r\n```\r\n\r\n### Follow a user (PUT /user/following/marak)\r\n\r\n```js\r\nghme.follow('marak');\r\n```\r\n\r\n### Unfollow a user (DELETE /user/following/marak)\r\n\r\n```js\r\nghme.unfollow('marak');\r\n```\r\n\r\n### Get public keys of a user (GET /user/keys)\r\n\r\n```js\r\nghme.keys(callback); //array of keys\r\n```\r\n\r\n### Get a single public key (GET /user/keys/1)\r\n\r\n```js\r\nghme.keys(1, callback); //key\r\n```\r\n\r\n### Create a public key (POST /user/keys)\r\n\r\n```js\r\nghme.keys({\"title\":\"laptop\", \"key\":\"ssh-rsa AAA...\"}, callback); //key\r\n```\r\n\r\n### Update a public key (PATCH /user/keys/1)\r\n\r\n```js\r\nghme.keys(1, {\"title\":\"desktop\", \"key\":\"ssh-rsa AAA...\"}, callback); //key\r\n```\r\n\r\n### Delete a public key (DELETE /user/keys/1)\r\n\r\n```js\r\nghme.keys(1);\r\n```\r\n\r\n### List your public and private organizations (GET /user/orgs)\r\n\r\n```js\r\nghme.orgs(callback); // array of orgs\r\n```\r\n\r\n### List your repositories (GET /user/repos)\r\n\r\n```js\r\nghme.repos(callback); //array of repos\r\n```\r\n\r\n### Create a repository (POST /user/repos)\r\n\r\n```js\r\nghme.repos({\r\n  \"name\": \"Hello-World\",\r\n  \"description\": \"This is your first repo\",\r\n}, callback); //repo\r\n```\r\n\r\n### Fork a repository (POST /repos/pksunkara/hub/forks)\r\n\r\n```js\r\nghme.fork('pksunkara/hub', callback); //forked repo\r\n```\r\n\r\n## Github users api\r\n\r\nNo token required for the following\r\n\r\n### Get information about an user (GET /users/pksunkara)\r\n\r\n```js\r\nghuser.info(callback); //json\r\n```\r\n\r\n### Get an user followers (GET /users/pksunkara/followers)\r\n\r\n```js\r\nghuser.followers(callback); //array of github users\r\n```\r\n\r\n### Get an user followings (GET /users/pksunkara/following)\r\n\r\n```js\r\nghuser.following(callback); //array of github users\r\n```\r\n\r\n## Github repositories api\r\n\r\n### Get information about a repository (GET /repos/pksunkara/octonode)\r\n\r\n```js\r\nghrepo.info(callback); //json\r\n```\r\n\r\n### Get the commits for a repository (GET /repos/pkumar/hub/commits)\r\n\r\n```js\r\nghrepo.commits(callback); //array of commits\r\n```\r\n\r\n### Get the tags for a repository (GET /repos/pksunkara/hub/tags)\r\n\r\n```js\r\nghrepo.tags(callback); //array of tags\r\n```\r\n\r\n### Get the languages for a repository (GET /repos/pksunkara/hub/languages)\r\n\r\n```js\r\nghrepo.languages(callback); //array of languages\r\n```\r\n\r\n### Get the contributors for a repository (GET /repos/pksunkara/hub/contributors)\r\n\r\n```js\r\nghrepo.contributors(callback); //array of github users\r\n```\r\n\r\n### Get the branches for a repository (GET /repos/pksunkara/hub/branches)\r\n\r\n```js\r\nghrepo.branches(callback); //array of branches\r\n```\r\n\r\n### Get the issues for a repository (GET /repos/pksunkara/hub/issues)\r\n\r\n```js\r\nghrepo.issues(callback); //array of issues\r\n```\r\n\r\n### Get the README for a repository (GET /repos/pksunkara/hub/readme)\r\n\r\n```js\r\nghrepo.readme(callback); //file\r\nghrepo.readme('v0.1.0', callback); //file\r\n```\r\n\r\n### Get the contents of a path in repository\r\n\r\n```js\r\nghrepo.contents('lib/index.js', callback); //path\r\nghrepo.contents('lib/index.js', 'v0.1.0', callback); //path\r\n```\r\n\r\n### Get archive link for a repository\r\n\r\n```js\r\nghrepo.archive('tarball', callback); //link to archive\r\nghrepo.archive('zipball', 'v0.1.0', callback); //link to archive\r\n```\r\n\r\n### Get the blob for a repository (GET /repos/pksunkara/hub/git/blobs/SHA)\r\n\r\n```js\r\nghrepo.blob('18293abcd72', callback); //blob\r\n```\r\n\r\n### Get the teams for a repository (GET /repos/pksunkara/hub/teams)\r\n\r\n```js\r\nghrepo.teams(callback); //array of teams\r\n```\r\n\r\n### Delete the repository (DELETE /repos/pksunkara/hub)\r\n\r\n```js\r\nghrepo.destroy();\r\n```\r\n\r\n## Github organizations api\r\n\r\n### Get information about an organization (GET /orgs/flatiron)\r\n\r\n```js\r\nghorg.info(callback); //json\r\n```\r\n\r\n### List organization repositories (GET /orgs/flatiron/repos)\r\n\r\n```js\r\nghorg.repos(callback); //array of repos\r\n```\r\n\r\n### Create an organization repository (POST /orgs/flatiron/repos)\r\n\r\n```js\r\nghorg.repos({\r\n  name: 'Hello-world',\r\n  description: 'My first world program'\r\n}, callback); //repo\r\n```\r\n\r\n### Get an organization's teams (GET /orgs/flatiron/teams)\r\n\r\n```js\r\nghorg.teams(callback); //array of teams\r\n```\r\n\r\n### Get an organization's members (GET /orgs/flatiron/members)\r\n\r\n```js\r\nghorg.members(callback); //array of github users\r\n```\r\n\r\n### Check an organization member (GET /orgs/flatiron/members/pksunkara)\r\n\r\n```js\r\nghorg.member('pksunkara', callback); //boolean\r\n```\r\n\r\n## Github gists api\r\n\r\n### List authenticated user's gists (GET /gists)\r\n\r\n```js\r\nghgist.list(callback); //array of gists\r\n```\r\n\r\n### List authenticated user's public gists (GET /gists/public)\r\n\r\n```js\r\nghgist.public(callback); //array of gists\r\n```\r\n\r\n### List authenticated user's starred gists (GET /gists/starred)\r\n\r\n```js\r\nghgist.starred(callback); //array of gists\r\n```\r\n\r\n### List a user's public gists (GET /users/pksunkara/gists)\r\n\r\n```js\r\nghgist.user('pksunkara', callback); //array of gists\r\n```\r\n\r\n### Get a single gist (GET /gists/37)\r\n\r\n```js\r\nghgist.get(37, callback); //gist\r\n```\r\n\r\n### Create a gist (POST /gists)\r\n\r\n```js\r\nghgist.create({\r\n  description: \"the description\",\r\n  files: { ... }\r\n}), callback); //gist\r\n```\r\n\r\n### Edit a gist (PATCH /gists/37)\r\n\r\n```js\r\nghgist.edit(37, {\r\n  description: \"hello gist\"\r\n}, callback); //gist\r\n```\r\n\r\n### Delete a gist (DELETE /gists/37)\r\n\r\n```js\r\nghgist.delete(37);\r\n```\r\n\r\n### Star a gist (PUT /gists/37/star)\r\n\r\n```js\r\nghgist.star(37);\r\n```\r\n\r\n### Unstar a gist (DELETE /gists/37/unstar)\r\n\r\n```js\r\nghgist.unstar(37);\r\n```\r\n\r\n### Check if a gist is starred (GET /gists/37/star)\r\n\r\n```js\r\nghgist.check(37); //boolean\r\n```\r\n\r\n### List comments on a gist (GET /gists/37/comments)\r\n\r\n```js\r\nghgist.comments(37, callback); //array of comments\r\n```\r\n\r\n### Create a comment (POST /gists/37/comments)\r\n\r\n```js\r\nghgist.comments(37, {\r\n  body: \"Just commenting\"\r\n}, callback); //comment\r\n```\r\n\r\n### Get a single comment (GET /gists/comments/1)\r\n\r\n```js\r\nghgist.comment(1, callback); //comment\r\n```\r\n\r\n### Edit a comment (POST /gists/comments/1)\r\n\r\n```js\r\nghgist.comment(1, {\r\n  body: \"lol at commenting\"\r\n}, callback); //comment\r\n```\r\n\r\n### Delete a comment (DELETE /gists/comments/1)\r\n\r\n```js\r\nghgist.comment(1);\r\n```\r\n\r\n## Github teams api\r\n\r\n### Get a team (GET /team/37)\r\n\r\n```js\r\nghteam.info(callback); //json\r\n```\r\n\r\n### Get the team members (GET /team/37/members)\r\n\r\n```js\r\nghteam.members(callback); //array of github users\r\n```\r\n\r\n### Check if a user is part of the team (GET /team/37/members/pksunkara)\r\n\r\n```js\r\nghteam.member('pksunkara'); //boolean\r\n```\r\n\r\n## Testing\r\n```\r\nnpm test\r\n```\r\n\r\nIf you like this project, please watch this and follow me.\r\n\r\n## Contributors\r\nHere is a list of [Contributors](http://github.com/pksunkara/octonode/contributors)\r\n\r\n### TODO\r\n\r\nThe following method names use underscore as an example. The library contains camel cased method names.\r\n\r\n```js\r\n// public orgs for unauthenticated, private and public for authenticated\r\nme.get_organizations(callback);\r\n\r\n// public repos for unauthenticated, private and public for authenticated\r\nme.get_watched_repositories(callback);\r\nme.is_watching('repo', callback);\r\nme.start_watching('repo', callback);\r\nme.stop_watching('repo', callback);\r\nme.get_issues(params, callback);\r\n\r\n// organization data\r\nvar org = octonode.Organization('bulletjs');\r\n\r\norg.update(dict_with_update_properties, callback);\r\norg.add_member('user', 'team', callback);\r\norg.remove_member('user', callback);\r\norg.get_public_members(callback);\r\norg.is_public_member('user', callback);\r\norg.make_member_public('user', callback);\r\norg.conceal_member('user', callback);\r\n\r\norg.get_team('team', callback);\r\norg.create_team({name:'', repo_names:'', permission:''}, callback);\r\norg.edit_team({name:'', permission:''}, callback);\r\norg.delete_team('name', callback);\r\norg.get_team_members('team', callback);\r\norg.get_team_member('team', 'user', callback);\r\norg.remove_member_from_team('user', 'team', callback);\r\norg.get_repositories(callback);\r\norg.create_repository({name: ''}, callback);\r\norg.get_team_repositories('team', callback);\r\norg.get_team_repository('team', 'name', callback);\r\norg.add_team_repository('team', 'name', callback);\r\norg.remove_team_repository('team', 'name', callback);\r\n\r\nvar repo = octonode.Repository('pksunkara/octonode');\r\n\r\nrepo.update({name: ''}, callback);\r\n\r\n// collaborator information\r\nrepo.get_collaborators(callback);\r\nrepo.has_collaborator('name', callback);\r\nrepo.add_collaborator('name', callback);\r\nrepo.remove_collaborator('name', callback);\r\n\r\n// commit data\r\nrepo.get_commit('sha-id', callback);\r\nrepo.get_all_comments(callback);\r\nrepo.get_commit_comments('SHA ID', callback);\r\nrepo.comment_on_commit({body: '', commit_id: '', line: '', path: '', position: ''}, callback);\r\nrepo.get_single_comment('comment id', callback);\r\nrepo.edit_single_comment('comment id', callback);\r\nrepo.delete_single_comment('comment id', callback);\r\n\r\n// downloads\r\nrepo.get_downloads(callback);\r\nrepo.get_download(callback);\r\nrepo.create_download({name: ''}, 'filepath', callback);\r\nrepo.delete_download(callback);\r\n\r\n// keys\r\nrepo.get_deploy_keys(callback);\r\nrepo.get_deploy_key('id', callback);\r\nrepo.create_deploy_key({title: '', key: ''}, callback);\r\nrepo.edit_deploy_key({title: '', key: ''}, callback);\r\nrepo.delete_deploy_key('id', callback);\r\n\r\n// watcher data\r\nrepo.get_watchers(callback);\r\n\r\n// pull requests\r\nrepo.get_all_pull_request_comments(callback);\r\nrepo.get_pull_request_comment('id', callback);\r\nrepo.create_pull_request_comment('id', {body:'', commit_id:'', path:'', position:''}, callback);\r\nrepo.reply_to_pull_request_comment('id', 'body', callback);\r\nrepo.edit_pull_request_comment('id', 'body', callback);\r\nrepo.delete_pull_request_comment('id', callback);\r\nrepo.get_issues(params, callback);\r\nrepo.get_issue('id', callback);\r\nrepo.create_issue({title: ''}, callback);\r\nrepo.edit_issue({title: ''}, callback);\r\nrepo.get_issue_comments('issue', callback);\r\nrepo.get_issue_comment('id', callback);\r\nrepo.create_issue_comment('id', 'comment', callback);\r\nrepo.edit_issue_comment('id', 'comment', callback);\r\nrepo.delete_issue_comment('id', callback);\r\nrepo.get_issue_events('id', callback);\r\nrepo.get_events(callback);\r\nrepo.get_event('id', callback);\r\nrepo.get_labels(callback);\r\nrepo.get_label('id', callback);\r\nrepo.create_label('name', 'color', callback);\r\nrepo.edit_label('name', 'color', callback);\r\nrepo.delete_label('id', callback);\r\nrepo.get_issue_labels('issue', callback);\r\nrepo.add_labels_to_issue('issue', ['label1', 'label2'], callback);\r\nrepo.remove_label_from_issue('issue', 'labelid', callback);\r\nrepo.set_labels_for_issue('issue', ['label1', 'label2'], callback);\r\nrepo.remove_all_labels_from_issue('issue', callback);\r\nrepo.get_labels_for_milestone_issues('milestone', callback);\r\nrepo.get_milestones(callback);\r\nrepo.get_milestone('id', callback);\r\nrepo.create_milestone('title', callback);\r\nrepo.edit_milestone('title', callback);\r\nrepo.delete_milestone('id', callback);\r\n\r\n// raw git access\r\nrepo.create_blob('content', 'encoding', callback);\r\nrepo.get_commit('sha-id', callback);\r\nrepo.create_commit('message', 'tree', [parents], callback);\r\nrepo.get_reference('ref', callback);\r\nrepo.get_all_references(callback);\r\nrepo.create_reference('ref', 'sha', callback);\r\nrepo.update_reference('ref', 'sha', force, callback);\r\n```\r\n\r\n__I accept pull requests and guarantee a reply back within a day__\r\n\r\n## License\r\nMIT/X11\r\n\r\n## Bug Reports\r\nReport [here](http://github.com/pksunkara/octonode/issues). __Guaranteed reply within a day__.\r\n\r\n## Contact\r\nPavan Kumar Sunkara (pavan.sss1991@gmail.com)\r\n\r\nFollow me on [github](https://github.com/users/follow?target=pksunkara), [twitter](http://twitter.com/pksunkara)\r\n"}